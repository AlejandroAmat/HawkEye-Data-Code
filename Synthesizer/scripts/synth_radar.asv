% Copyright (c) 2018-2020 Junfeng Guan, Sohrab Madani, Suraj Jog, Saurabh Gupta, 
% Haitham Hassanieh, University of Illinois at Urbana-Champaign
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in
% all copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
% THE SOFTWARE.

close all; clear; clc;

addpath('./function');

% options 

rng('shuffle');

N_scene_car = 10; % # of scene we build with every selected car/group of cars
counter_scene = 0;


variable_library;

%%
% scene_files = dir(fullfile(scenePath, '*.mat'));
% N_scene = length(scene_files);

N_scene = 1;


for k1 = 1:length(car_list)
    car1_v_origin = load_surface(car_list);
    
    for ks = 1:N_scene_car
        car1_v = car1_v_origin;
        
        % rotate        
        car1_v.rotate = rotate_ang(randi(length(rotate_ang)));
        
        rotate_m_c1 = rotation_matrix(car1_v.rotate/180*pi); 
        car1_v.cart_v(:,1:2) = rotate2d(car1_v.cart_v, rotate_m_c1);
        car1_v.bbox(:,1:2) = rotate2d(car1_v.bbox, rotate_m_c1);
        car1_v.lim = round([min(car1_v.cart_v);max(car1_v.cart_v)]); % update

        % translation for each car
        trans_xrng_c1 = (-4000 - car1_v.lim(1,1)):500:(4000 - car1_v.lim(2,1));
        trans_yrng_c1 = (3500 - car1_v.lim(1,2)):500:(12000 - car1_v.lim(2,2));
        trans_x_c1 = trans_xrng_c1(randi(length(trans_xrng_c1))); 
        trans_y_c1 = trans_yrng_c1(randi(length(trans_yrng_c1)));
        trans_z_c1 = 1000; % calibrate for the height of our radar 

        % translate
        car1_v.translate = [trans_x_c1, trans_y_c1, trans_z_c1];
        car1_v.cart_v = car1_v.cart_v + car1_v.translate;
        car1_v.bbox = car1_v.bbox + car1_v.translate;
        car1_v.lim = round([min(car1_v.cart_v);max(car1_v.cart_v)]); % update
        
%         if opt.plot_3D
%             figure; 
%             cart_v_plot = datasample(car1_v.cart_v, 1000); % downsampling during plotting
%             scatter3(cart_v_plot(:,1),cart_v_plot(:,2),cart_v_plot(:,3));
%             scatter3(car1_v.bbox(:,1), car1_v.bbox(:,2),car1_v.bbox(:,3)); hold on;
%             axis equal;
%         end
       
        %moving back the cars if the have gone too far
        trans_xrng =  (-4000 - car1_v.lim(1,1)):500:(4000 - car1_v.lim(2,1));
        trans_yrng =  (3000 - car1_v.lim(1,2)):500:(12000 - car1_v.lim(2,2));
        
        trans_x = 0;
        if ~isempty(trans_xrng)
            trans_x = trans_xrng(randi(length(trans_xrng)));
        end
        trans_y = 0;
        if ~isempty(trans_yrng)
            trans_y = trans_yrng(randi(length(trans_yrng)));
        end

        car1_v.translate = car1_v.translate + [trans_x, trans_y, 0];
        car1_v.cart_v = car1_v.cart_v + [trans_x, trans_y, 0];
        car1_v.bbox = car1_v.bbox + [trans_x, trans_y, 0];
        car1_v.lim = round([min(car1_v.cart_v);max(car1_v.cart_v)]); % update

        figure;
        cart_v_plot = datasample(car1_v.cart_v, 1000);
        scatter3(cart_v_plot(:,1),cart_v_plot(:,2),cart_v_plot(:,3)); hold on;
        scatter3(car1_v.bbox(:,1),car1_v.bbox(:,2),car1_v.bbox(:,3), 'r*'); hold on;
        axis equal;

        car1_v.cart_v = car1_v.cart_v/1000; car1_v.bbox = car1_v.bbox/1000; % convert mm to m
        car1_v.sph_v = zeros(car1_v.N_pt,3); % convert cartesian to spherical
        [car1_v.sph_v(:,1),car1_v.sph_v(:,2),car1_v.sph_v(:,3)] = cart2sph(car1_v.cart_v(:,1),car1_v.cart_v(:,2),car1_v.cart_v(:,3));
        car1_v.sphlim = [min(car1_v.sph_v);max(car1_v.sph_v)]; % range the spherical coordinates
        sphlim = car1_v.sphlim;

        figure;
            cart_v_plt = datasample(car1_v.cart_v,round(car1_v.N_pt/100));
            scatter3(cart_v_plt(:,1),cart_v_plt(:,2),cart_v_plt(:,3)); hold on;
        end
        title(sprintf('point cloud of scene %d',ks));


        [visible_cart_v,visible_sph_v] = remove_occlusion(sphlim,N_car,car1_v);
        try
            reflector_cart_v = model_point_reflector(visible_cart_v,N_car,car1_v);
        catch
            continue;
        end

        if isempty(reflector_cart_v)
            continue;
        end

        signal_array = simulate_radar_signal(reflector_cart_v);
        signal_file = sprintf('%s/signal_s%d.mat',signal_path,ks);
        save(signal_file,'signal_array','-v7.3');


        signal_array = awgn(signal_array,-30);
        signal_array = signal_array(11:end-90,:,:);

        sph_pwr = radar_dsp(signal_array);
        heatmap_file = sprintf('%s/sphPwr_s%d.mat',heatmap_path,ks);
        save(heatmap_file,'sph_pwr','-v7.3');

        %% Ground Truth
        % convert matlab spherical coordinates to mine
        % difference: (phi, theta, rho) vs (rho, phi, theta) +
        % phi, theta angle
        visible_sph_v = [visible_sph_v(:,3),visible_sph_v(:,1),pi/2-visible_sph_v(:,2)];
    %     visible_sph_v_deg = [visible_sph_v(:,1),visible_sph_v(:,2)/pi*180,visible_sph_v(:,2)/pi*180];

        mask_file = sprintf('%s/GT_%d',GT_path,ks);
        save(mask_file,'reflector_cart_v','visible_sph_v','-v7.3');

    %     figure;
    %     h = scatter(pt_mysph_de_1(:,2),pt_mysph_de_1(:,3));
    % %             h = scatter(sph_v_1(:,1)/pi*180,sph_v_1(:,2)/pi*180);
    %     title(sprintf('mask %d',ks));
    %     xlabel('phi')
    %     ylabel('theta');
    %     saveas(h,[mask_file,'.jpg']);

        close all;
        fprintf('ks=%d finish \n',ks);
end